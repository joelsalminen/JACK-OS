// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

	static Array twoToThe; //Taulukko, johon on talletettu 2^n, n=16 asti

    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 32767;
		/* twoToThe[15] = 2^16-1, koska 16-bittiset lukumuuttujien positiiviset arvot menevät vain 
		tähän asti */
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x<0){
			return x-x-x; /*Esim. -1-(-1)-(-1) = 1*/
		}
		return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		var int sum;
		var int shiftedX;
		var int j;
		var int nCheck;
		let nCheck = 0;

		/*Tarkistetaan, onko luku negatiivinen. Jos vain toinen luvuista
		on negatiivinen, nCheck saa arvokseen 1. Jos taas molemmat tai 
		kumpikaan ei ole negatiivinen, nCheckin != 1. Negatiiviset luvut muutetaan
		positiivisiksi kertolaskun suorittamista varten. */
		if (x<0){
			let nCheck = nCheck + 1;
			let x = Math.abs(x);
		}
		if (y<0){
			let nCheck = nCheck + 1;
			let y = Math.abs(y);
		}

		let j = 0;
		let sum = 0;
		let shiftedX = x;
		while (j<(15)){
			if(Math.bit(j, y) = 1){

				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let j = j + 1;
		}
		if (nCheck = 1){
			/*Jos vain toinen tulon tekijöistä oli negatiivinen, muutetaan saatu tulos 
			negatiiviseksi*/
			return (sum-sum-sum);
		}
		return sum;
    }


	/*Palauttaa 2^(n-1):n arvon*/
	function int two_to_the(int j){
		return twoToThe[j];
	}


	/*Tarkistaa, onko luvun j:s bitti 1. Käytetään avuksi kertolaskufunktiossa. */
	function int bit(int j, int y){
		if (~(y & twoToThe[j] = 0)){
			return (1);
		}
		else{
			return (0);
		}
	}

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
		/*Tässä funktiossa tarkistetaan, onko lopullinen tulos negatiivinen
		vai positiivinen. Itse jakolasku suoritetaan rekursiivisessa apufunktiossa
		Math.divider() */
		var int nCheck;
		var int result;
		let result = 0;
		let nCheck = 0;

		/*Tarkistetaan, onko luku negatiivinen. Jos vain toinen luvuista
		on negatiivinen, nCheck saa arvokseen 1. Jos taas molemmat tai 
		kumpikaan ei ole negatiivinen, nCheckin != 1. Negatiiviset luvut muutetaan
		positiivisiksi kertolaskun suorittamista varten. */
		if (x<0){
			let nCheck = nCheck + 1;
			let x = Math.abs(x);
		}
		if (y<0){
			let nCheck = nCheck + 1;
			let y = Math.abs(y);
		}

		let result = Math.divider(x,y);

		if (nCheck = 1){
			/*Jos vain toinen tulon tekijöistä oli negatiivinen, muutetaan saatu tulos 
			negatiiviseksi*/
			return (result-result-result);
		}

		return (result);
    }


	/*Jakolaskufunktion apufunktio, täällä tapahtuu oikeasti 
	jakolaskuoperaatioiden suorittaminen*/
	function int divider(int x, int y){
		var int q;
		if (y>x){
			return 0;
		}
		let q = Math.divider(x, (y+y));
		if((x-(2*q*y))<y){
			return (q+q);
		}
		else{
			return ((q+q)+1);
		}
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y;
		var int j;
		let j = 8; /*bittien lukumäärä jaettuna kahdella */
		let y = 0;
		while (j>-1){
			if ((((y + twoToThe[j])*(y + twoToThe[j]))<(x) | (((y + twoToThe[j])*(y + twoToThe[j]))=(x))) & ((y + twoToThe[j] )*(y + twoToThe[j]))>0){
				let y = y + twoToThe[j];
			}
			let j = j - 1;
		}
		return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a>b){
			return a;
		}
		else{
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a<b){
			return a;
		}
		else{
			return b;
		}
    }
}
