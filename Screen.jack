// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

	static Array screen;
	static int color;
    /** Initializes the Screen. */
    function void init() {
		
		let color = 1;
		let screen = Array.new(24575-16384);
		let screen = 16384;
		return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		while (i<256*32){
			let screen[i] = 0;
		}
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
		if (b){
			let color = 1;
		}
		else{
			let color = 0;
		}
		return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
		var int address;
		var int mask;
		let address = (y*32) + (x/16);
		let mask = Math.two_to_the(x & 15);
		let screen[address] = screen[address] | mask;
		return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx;
		var int dy;
		var int a;
		var int b;
		var int adyMinusbdx;
		let adyMinusbdx = 0;
		let dx = x2-x1;
		let dy = y1-y2;
		let a = 0;
		let b = 0;

		if (y1 = y2){
			do Screen.drawHorizontalLine(x1, x2, y1);
			return;
		}
		if (x1 = x2){
			do Screen.drawVerticalLine(x1, y1, y2);
			return;
		}
		while ((a<(dx+1)) &(b<(dy+1))){
			do Screen.drawPixel((x1+a),(y1+b));
			if (adyMinusbdx<0){
				let a = a + 1;
				let adyMinusbdx = adyMinusbdx + dy;
			}
			else{
				let b = b + 1;
				let adyMinusbdx = adyMinusbdx - dx;
			}
		}
		return;
    }
	
	function void drawHorizontalLine(int x1, int x2, int y){
		var int i;
		let i = x1;
		while(i<x2){
			do Screen.drawPixel(i, y);
			let i = i + 1;
		}
		return;
	}


	function void drawVerticalLine(int x, int y1, int y2){
		var int i;
		let i = y1;
		while(i<y2){
			do Screen.drawPixel(x, i);
			let i = i + 1;
		}
		return;

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int x;
		var int y;
		let x = x1;
		let y = y1;
		while (y<(y2+1)){
			while(x<(x2+1)){
				do Screen.drawPixel(x,y);
				let x = x + 1;
			}
			let y = y + 1;
			let x = x1;
		}
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		var int dy;
		let dy = r-r-r;
		while (dy<(r+1)){
			do Screen.drawLine((cx-Math.sqrt(Math.multiply(r,r)-Math.multiply(dy,dy))), (cy+dy), (cx+Math.sqrt((Math.multiply(r,r)-Math.multiply(dy,dy)))), (cy+dy));
			let dy = dy + 1;
		}
		
		return;
    }
}








